/*
 * detect-dependencies.js
 * https://github.com/stephenplusplus/wiredep
 *
 * Copyright (c) 2013 Stephen Sawchuk
 * Licensed under the MIT license.
 */

'use strict';

var fs = require('fs');
var path = require('path');
var _ = require('lodash');
var helpers = require('./helpers');
var prop = helpers.prop;
var SpliteStr = "#@"

/**
 * Find the component's JSON configuration file.
 *
 * @param  {object} config     the global configuration object
 * @param  {string} component  the name of the component to dig for
 * @return {object} the component's config file
 */
var findComponentConfigFile = function (config, component) {
  var componentConfigFile;

  ['.bower.json',
    'bower.json',
    'component.json',
    'package.json'].forEach(function (configFile) {
    configFile = config.get('bower-directory')+"/"+component+"/"+configFile;
    if (!_.isObject(componentConfigFile) && fs.existsSync(configFile)) {
      componentConfigFile = JSON.parse(fs.readFileSync(configFile));
    }
  });

  return componentConfigFile;
};


/**
 * Find the main file the component refers to. It's not always main :(
 *
 * @param  {object} config        the global configuration object
 * @param  {string} component     the name of the component to dig for
 * @param  {componentConfigFile}  the component's config file
 * @return {array} the array of paths to the component's primary file(s)
 */
var findMainFiles = function (config, component, componentConfigFile) {

  var filePaths = [];
  var file;
  var isDebug = config.get('isDebug') || false;
  var mainFiles = [];
  var iscdn = false;
  if(isDebug){ //如果是debug模式，则取原始的文件列表
     mainFiles = componentConfigFile.originalMainFiles || [];
  }else{
     iscdn = typeof componentConfigFile.cdnmain != 'undefined';
     mainFiles = iscdn ? componentConfigFile.cdnmain : componentConfigFile.main;
  }

  if (_.isString(mainFiles)){
    var type = path.extname(mainFiles);
    filePaths = [mainFiles+SpliteStr+type.substr(1)]; //调整文件名称加: #@文件后缀
  } else if (_.isArray(mainFiles)) {
    var main = mainFiles;
    var _main = [];
    for(var i=0 ; i<main.length; i++){ //install时不引用min文件
        var mainItem = main[i];
        if(_.isPlainObject(mainItem)){
           //如果是对象则是对文件进行了设备分类
          _.forIn(mainItem , function(value , key){
              _.forEach(value , function(v){
                 if(v.indexOf('.min.') < 0){
                  _main.push(v+SpliteStr+path.extname(v).substr(1)+"_"+key); //调整文件名加: #@文件后缀_设备类型
                 }
              });
          });
        }else{
          if(mainItem.indexOf('.min.') < 0){
              _main.push(mainItem+SpliteStr+path.extname(mainItem).substr(1)); //调整文件名称加: #@文件后缀
          }
        }
    }
    filePaths = _main;
  }
  return filePaths.map(function (file) {
     if(!/^http[s]?:\/\//i.test(file)){
        return config.get('bower-directory')+'/'+component+'/'+file;
     }else{
        return file;
     }
  });
};


/**
 * Store the information our prioritizer will need to determine rank.
 *
 * @param  {object} config   the global configuration object
 * @return {function} the iterator function, called on every component
 */
var gatherInfo = function (config) {
  /**
   * The iterator function, which is called on each component.
   *
   * @param  {string} version    the version of the component
   * @param  {string} component  the name of the component
   * @return {undefined}
   */
  return function (version, component) {
    var dep = config.get('global-dependencies').get(component) || {
      main: '',
      type: '',
      name: '',
      dependencies: {}
    };

    var componentConfigFile = findComponentConfigFile(config, component);
    var warnings = config.get('warnings');

    var mains = findMainFiles(config, component, componentConfigFile);

    var fileTypes = _.chain(mains).map(function (main) {
        return  main.substr(main.indexOf(SpliteStr)+2);
    }).unique().value();

    dep.main = mains;
    dep.type = fileTypes; //js js_pc js_pad js_phone...
    dep.name = componentConfigFile.name;

    if (dep.main.length === 0 && warnings) {
      // can't find the main file. this config file is useless!
      warnings.push(component + ' was not injected in your file.');
      warnings.push(
        'Please go take a look in "'
        + path.join(config.get('bower-directory'), component)
        + '" for the file you need, then manually include it in your file.');

      config.set('warnings', warnings);
      return;
    }

    if (componentConfigFile.dependencies) {
      dep.dependencies = componentConfigFile.dependencies;
      _.each(componentConfigFile.dependencies, gatherInfo(config));
    }

    config.get('global-dependencies').set(component, dep);
  };
};


/**
 * Compare two dependencies to determine priority.
 *
 * @param  {object} a  dependency a
 * @param  {object} b  dependency b
 * @return {number} the priority of dependency a in comparison to dependency b
 */
var dependencyComparator = function (a, b) {
  var aNeedsB = false;
  var bNeedsA = false;

  aNeedsB = Object.
    keys(a.dependencies).
    some(function (dependency) {
      return dependency === b.name;
    });

  if (aNeedsB) {
    return 1;
  }

  bNeedsA = Object.
    keys(b.dependencies).
    some(function (dependency) {
      return dependency === a.name;
    });

  if (bNeedsA) {
    return -1;
  }

  return 0;
};


/**
 * Take two arrays, sort based on their dependency relationship, then merge them
 * together.
 *
 * @param  {array} left
 * @param  {array} right
 * @return {array} the sorted, merged array
 */
var merge = function (left, right) {
  var result = [];
  var leftIndex = 0;
  var rightIndex = 0;

  while (leftIndex < left.length && rightIndex < right.length) {
    if (dependencyComparator(left[leftIndex], right[rightIndex]) < 1) {
      result.push(left[leftIndex++]);
    } else {
      result.push(right[rightIndex++]);
    }
  }

  return result.
    concat(left.slice(leftIndex)).
    concat(right.slice(rightIndex));
};


/**
 * Take an array and slice it in halves, sorting each half along the way.
 *
 * @param  {array} items
 * @return {array} the sorted array
 */
var mergeSort = function (items) {
  if (items.length < 2) {
    return items;
  }

  var middle = Math.floor(items.length / 2);

  return merge(
    mergeSort(items.slice(0, middle)),
    mergeSort(items.slice(middle))
  );
};


/**
 * Some dependencies which we know should always come first.
 */
var eliteDependencies = [
  'es5-shim',
  'jquery',
  'zepto',
  'modernizr'
];


/**
 * Sort the dependencies in the order we can best determine they're needed.
 *
 * @param  {object} config    the global configuration object
 * @param  {string} fileType  the type of file to prioritize
 * @return {array} the sorted items of 'path/to/main/files.ext' sorted by type
 */
var prioritizeDependencies = function (config, fileType) {

  var eliteDependenciesCaught = [];
  var dependencies = mergeSort(
    _.toArray(config.get('global-dependencies').get()).
      filter(function (dependency) {
        return _.contains(dependency.type, fileType);
      }).
      filter(function (dependency) {
        if (_.contains(eliteDependencies, dependency.name)) {
          eliteDependenciesCaught.push(dependency.main);
        } else {
          return true;
        }
      })
    ).map(prop('main'));

  eliteDependenciesCaught.
    forEach(function (dependency) {
      dependencies.unshift(dependency);
    });

  return _(dependencies)
         .flatten()
         .value()
         .filter(function (main) {
           var pos = main.indexOf(SpliteStr);
           return main.substr(pos+2) === fileType;
          })
          .map(function (main) {
              var pos = main.indexOf(SpliteStr);
              return main.substr(0 , pos);
          });
};


/**
 * Excludes dependencies that match any of the patterns.
 *
 * @param  {array} allDependencies  array of dependencies to filter
 * @param  {array} patterns         array of patterns to match against
 * @return {array} items that don't match any of the patterns
 */
var filterExcludedDependencies = function (allDependencies, patterns) {
  return _.transform(allDependencies, function (result, dependencies, fileType) {
    result[fileType] = _.reject(dependencies, function (dependency) {
      return _.find(patterns, function (pattern) {
        return dependency.match(pattern);
      });
    });
  });
};

/**
 * 过滤需要过滤的组件的依赖文件
 */
var filterByComp = function(filterComps , globalDeps ,  dependencies){

     for(var p in filterComps){
         var _dep = globalDeps.get(p);
         var main = _dep.main;
         dependencies = _.toArray(dependencies).filter(function(dependency){
              return !_.contains(main, dependency);
         });
         var compDep = _dep.dependencies;
         if(typeof compDep != 'undefined'){
             var comps = _.keys(compDep);
             dependencies = filterByComp(comps , globalDeps , dependencies);
         }
      }
      return dependencies;
}

//得到所用类型
var  getFileTypes = function(config){
    var types = [];
    _.forEach(config.get('global-dependencies').get() , function(dependency){
        var dtypes = dependency.type;
        if(_.isArray(dtypes)){
           _.forEach(dtypes , function(type){
              if(!_.contains(types ,type)){
                  types.push(type);
              }
           })
        }else{
          types.push(dtypes);
        }
    })
    return types;
}

/**
 * Detect dependencies of the components from `bower.json`.
 *
 * @param  {object} config the global configuration object.
 * @return {object} config
 */
module.exports = function detect(config) {

 var allDependencies = {};
  _.assign(allDependencies, config.get('bower.json').dependencies);
  _.assign(allDependencies, config.get('bower.json').devDependencies);
  _.each(allDependencies, gatherInfo(config));

  var types = getFileTypes(config);
  var retDeps = {};
  _.forEach(types , function(type){
      var dep = prioritizeDependencies(config, type);
      retDeps[type] = dep;
  });

  var filterComps  =  config.get("filterComps");
  var globalDeps = config.get('global-dependencies');
  _.forEach(types , function(type){
      if(typeof filterComps != 'undefined'){
         retDeps[type]= filterByComp(filterComps , globalDeps , retDeps[type]);
      }
  });

  retDeps = filterExcludedDependencies(retDeps, config.get('exclude'));
  config.set('global-dependencies-sorted', retDeps);
  config.set('types' , types);
  return config;

};
