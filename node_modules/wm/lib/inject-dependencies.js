/*
 * inject-dependencies.js
 * https://github.com/stephenplusplus/wiredep
 *
 * Copyright (c) 2013 Stephen Sawchuk
 * Licensed under the MIT license.
 */

'use strict';

var fs = require('fs');
var path = require('path');
var _ = require('lodash');
var SpliteStr = "#@"

var globalDependenciesSorted;
var ignorePath;
var fileTypes;

var fileTypesDefault = {
  html: {
    block: /(([\s\t]*)<!--\s*bower:*(\S*)\s*(?:device:\s*([^\s]*))*\s*-->)(\n|\r|.)*?(<!--\s*endbower\s*-->)/gi,
    detect: {
      js: /<script.*src=['"](.+)['"]>/gi,
      css: /<link.*href=['"](.+)['"]/gi,
      requirejs: /<script.*src=['"](.+)['"]>/gi,
      basejs: /<script.*src=['"](.+)['"]>/gi
    },
    replace: {
      js: '<script src="{{filePath}}"></script>',
      css: '<link rel="stylesheet" href="{{filePath}}" />',
      requirejs : '      "{{moduleName}}" : "{{filePath}}"',
      basejs: '<script src="{{filePath}}"></script>'
    }
  }
};

fileTypesDefault.htm = fileTypesDefault.html;
fileTypesDefault['default'] = fileTypesDefault.html;

/**
 * Find references already on the page, not in a Bower block.
 */
var filesCaught = [];
var findReferences = function (match, reference) {
  filesCaught.push(reference);
  return match;
};


var replaceIncludes = function (fileType, returnType , config) {
  /**
   * Callback function after matching our regex from the source file.
   *
   * @param  {array}  match       strings that were matched
   * @param  {string} startBlock  the opening <!-- bower:xxx device:xx--> comment
   * @param  {string} spacing     the type and size of indentation
   * @param  {string} blockType   the type of block (js/css)
   * @param  {string} deviceType   the type of block (js/css) whith deviceType
   * @param  {string} oldScripts  the old block of scripts we'll remove
   * @param  {string} endBlock    the closing <!-- endbower --> comment
   * @return {string} the new file contents
   */
  return function (match, startBlock, spacing, blockType, deviceType , oldScripts, endBlock, offset, string) {
    blockType = blockType || 'js';
    var newFileContents = startBlock;
    var fulltype =  blockType;
    if(deviceType){
       fulltype += ('_'+deviceType);
    }

    var dependencies = globalDependenciesSorted[fulltype] || [];
    spacing = returnType + spacing.replace(/\r|\n/g, '');

    if(blockType === 'requirejs' && dependencies.length>0){
        //如果是require方式注入的则需要先初始化requirejs.config({paths: {},waitSeconds: 20,shim: {});
        newFileContents +=  (spacing + "<script>");
        newFileContents +=  (spacing + "   requirejs.config({");
        newFileContents +=  (spacing + "     paths:{");
        var _end =          (spacing + "     },");
        _end +=             (spacing + "     waitSeconds: 20,shim: {}});");
        _end +=             (spacing + "</script>");
        endBlock = (_end +  spacing + endBlock);
    }

    if(blockType === 'requirejs' && dependencies.length == 0){
           return startBlock+spacing+endBlock;
    }
    dependencies.
      map(function (path) {
        return  path.replace(/\\/g, '/').replace(ignorePath.replace(/\\/g, '/'), '');
      }).
      filter(function (path) {
        if(blockType === 'requirejs'){
            return true;
        }
        return filesCaught.indexOf(path) === -1;
      }).
      forEach(function (path , index , srcDep) {
        var component = '';
        var componentsDependencies = config.get("global-dependencies").get();
        for(var p in componentsDependencies){
            var d = componentsDependencies[p].main;
            if(typeof d !== 'undefined'){
                for(var i=0 ; i<d.length; i++){
                    var _mainPath = d[i].replace(/\\/g, '/').replace(ignorePath.replace(/\\/g, '/'), '');
                    var pos = _mainPath.indexOf('#@');  //这里需要调整一下，看看能不能在detect中处理掉#@标示
                    var _mainPath = pos < 0 ? _mainPath: _mainPath.substr(0 , pos);
                    if(path === _mainPath){
                        component = p;
                        break;
                    }
                }
            }
        }

        if(blockType == 'requirejs'){
                path = path.substring(0 , path.lastIndexOf('.js') ==-1 ? path.length : path.lastIndexOf('.js'));
        }
        //var pos = blockType.indexOf('_');
        //var replaceType = pos >-1 ? blockType.substr(pos+1) : blockType;
        newFileContents += spacing + fileType.replace[blockType].replace('{{filePath}}', path).replace('{{moduleName}}' , component.replace("__","#"));
        if(blockType === 'requirejs' && (srcDep.length-1 > index)){
            //如果是require装载，需要加逗号
            newFileContents += ',';
        }
      });
      return newFileContents + spacing + endBlock;
  };
};


/**
 * Take a file path, read its contents, inject the Bower packages, then write
 * the new file to disk.
 *
 * @param  {string} file  path to the source file
 */

var injectScripts = function(config){
       return function (file) {
          var contents = String(fs.readFileSync(file));
          var fileExt = path.extname(file).substr(1);
          var fileType = fileTypes[fileExt] || fileTypes['default'];
          var returnType = /\r\n/.test(contents) ? '\r\n' : '\n';

          fs.writeFileSync(file, contents.replace(
            fileType.block,
            replaceIncludes(fileType, returnType , config)
          ));
       };
};


/**
 * Injects dependencies into the specified HTML file.
 *
 * @param  {object} config  the global configuration object.
 * @return {object} config
 */
module.exports = function inject(config) {
  globalDependenciesSorted = config.get('global-dependencies-sorted');
  ignorePath = config.get('ignore-path');
  fileTypes = _.clone(fileTypesDefault, true);

  _(config.get('file-types')).each(function (fileTypeConfig, fileType) {

    fileTypes[fileType] = fileTypes[fileType] || {};
    _.each(fileTypeConfig, function (config, configKey) {
      if (_.isPlainObject(fileTypes[fileType][configKey])) {
        fileTypes[fileType][configKey] =
          _.assign(fileTypes[fileType][configKey], config);
      } else {
        fileTypes[fileType][configKey] = config;
      }
    });
  });

  config.get('src').forEach(injectScripts(config));

  return config;
};
