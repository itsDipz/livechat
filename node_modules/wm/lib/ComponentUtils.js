"use strict";

var bower = require('bower');
var path = require('path');
var fs = require('fs');
var fileUtils = require('file-utils'); //文件处理工具
var mout = require('mout');
var _ = require('lodash');
var  detectDepend= require('./detect-dependencies');
var  injectDepend = require('./inject-dependencies');
var helpers = require('./helpers');
var UglifyJS = require('uglify-js');
var JSHINT = require('jshint').JSHINT;
var cssmin = require('cssmin');

var defaultRegistry = 'http://fe.staff.ifeng.com:9007';
var directory = 'app/components'
/**
 * 组件工具
 */
function ComponentUtils(){
}

/**
 * 安装组件 , 异步安装
 * @param {String|Array}componentNames 组件名称
 * @param {Object} options
 *                 installDir  组件安装目录
 *                 registry 组件注册地址
 */
ComponentUtils.prototype.install = function(componentNames , options){
    var save = typeof options.save == 'undefined' ? true : options.save
    var compDirectory = typeof options.directory == 'undefined' ? directory : options.directory
    componentNames = mout.lang.isString(componentNames) ? [componentNames] : componentNames;
    return bower.commands.install(componentNames , {'save': save} , {'cwd':options.installDir , 'registry': options.registry|| defaultRegistry , 'directory':compDirectory});
}

/**
 * 得到组件依赖的html脚本，这里假设组件已经安装
 * @param {Array|String} componentNames 组件
 * @param {Object} options
 *                 installDir 项目的暗转目录
 * @return 返回脚本和config数据 ，
 */
ComponentUtils.prototype.getDepInfo = function(componentNames , options){

    var installDir = options.installDir;
    var mockDeps = componentNames;
    var mock_bower = {'dependencies':mockDeps , devDependencies:{}}

    //2、创建依赖
    var config = helpers.createStore();
    config.set
    ('bower.json', mock_bower)
    ('bower-directory', installDir+"/"+fileUtils.readJSON(installDir+"/.bowerrc").directory)
    ('global-dependencies', helpers.createStore())
    ('isDebug' , options.isDebug)       //是否在debug模式下
    ('filterComps' , options.filterComponents) //需要過濾的組件
    return detectDepend(config);

}


/**
 * 得到组件的真实安装版本
 * @param installDir 项目安装目录
 * @param options    配置
 */
ComponentUtils.prototype.getDepRealVersion = function(installDir , options){
    var json = fileUtils.readJSON(installDir+'/bower.json');
    var compDir  = fileUtils.readJSON(installDir+'/.bowerrc').directory; //组件安装目录
    var deps = json.dependencies;
    var ret = {};
    for(var key in deps){
        var version = fileUtils.readJSON(installDir+'/'+compDir+'/'+key+'/package.json').version;
        ret[key] = version;
    }
    return ret;
}

/**
 * 安装组件map到指定的安装文件
 * @param installFile 待安装组件的文件
 * @param cmap  安装的组件map
 * @param options 安装选项
 */
ComponentUtils.prototype.installCompMap = function(installFile , cmap , options){
    var installFileContent = fileUtils.read(installFile);

    //删除已有的组件脚本
    installFileContent = installFileContent.replace(/(<script\s*id=['|"]vermap['|"]>[^<]*<\/script>)/gi , function(match , content  , offset , str){
          return "";
    });
    //重写组件列表脚本
    installFileContent = installFileContent.replace(/(.*)(<head>)((?:.|\r|\n)*<\/head>)/gi , function(match , pre , head , content  , offset , str){
          var space = '\n';
          if(pre){
             for(var i=0 ; i<pre.length; i++){
                space += ' ';
             }
          }
          return  pre+head+space+'<script id="vermap">'+space+'var glueComponentVerMap = '+JSON.stringify(cmap)+space+'<\/script>'+content;
    });
   fileUtils.write(installFile , installFileContent);
}

/**
 * 得到组件的依赖脚本,script mode
 * @param depFiles 依赖的文件内容
 * @return
 */
ComponentUtils.prototype.getJsDepsScriptsMode =  function(depFiles){

     var content = [];
     for(var i=0 ; i<depFiles.length ; i++){
        content.push('<script src="'+depFiles[i]+'" type="text/javascript"></script>')
     }
     return content.join('');
}

/**
 * 得到组件的依赖脚本， require mode
 * @param depFiles 依赖的文件
 * @param fileToComponentMap 文件对应组件名称
 * @return
 */
ComponentUtils.prototype.getJsDepsRequireMode =  function(depFiles ,fileToComponentMap){

     var content = [];
     content.push('<script type="text/javascript">')
     content.push('  requirejs.config({');
     content.push('      path:{');
     for(var i=0 ; i<depFiles.length ; i++){
         var f = depFiles[i];
         var componentsName = fileToComponentMap[f];
         if(f.lastIndexOf('.js')!=-1){
             f= f.substring(0,f.lastIndexOf('.js'));
         }
         retContent = '"'+componentsName+'" :"'+f+'"'; //这里还需要去掉文件后缀
         if(i>0 && i<cdnFiles.length-1){
            retContent += ',';
         }
     content.push('      '+retContent);
     }
     content.push('      },');
     content.push('      waitSeconds: 20,shim: {}});')
     content.push('</script>');
     return content.join('\n');
}


/**
 * 注入依赖的组件到指定的html中
 * @param depInfo 依赖的信息
 * @param options 配置选项
 *        {String|Array}src ： 需要注入的html文件
 *        {String} appDir 应用所在的目录
 *        {string} deviceType 设备类型
 */
ComponentUtils.prototype.injectDeps = function(depConfig , options){
    depConfig.set('src' , options.src);
    var deviceType = options.deviceType || "";
    //这里需要将glue、requirejs两个组件特殊处理，将其安装到base标记上

    var fileToComponents = getFileToComponentMap(depConfig);
    var  types = depConfig.get('types'); //获取"文件类型_设备类型"
    _.forEach(types , function(type){
        var baseFile = []
        var jsFile = [];
        if(type.indexOf("js") != 0) return;
        var deviceType = type.split("_").length > 1 ? "_"+type.split("_")[1]:"";
        var jsdepFile = depConfig.get('global-dependencies-sorted')['js'+deviceType];
        for(var i=0 ; i<jsdepFile.length; i++){
            var compName = fileToComponents[jsdepFile[i]];
            if(compName.indexOf('glue')!=-1 ||  compName.indexOf('requirejs')!=-1){
                baseFile.push(jsdepFile[i]);
            }else{
                jsFile.push(jsdepFile[i]);
            }
        }

        var addItem = function(obj , addKey , addValue){
             var value = obj[addKey];
             if(typeof value == 'undefined'){
                 value = [];
                 obj[addKey] = value;
             }
             if(!_.contains(value , addValue)){
                value.push.apply(value , addValue);
             }
        }
        addItem(depConfig.get('global-dependencies-sorted') , 'requirejs'+deviceType , jsFile);
        addItem(depConfig.get('global-dependencies-sorted') , 'js'+deviceType , jsFile);
        addItem(depConfig.get('global-dependencies-sorted') , 'basejs'+deviceType , baseFile);
    })


    depConfig.set('ignore-path' , options['ignore-path'] || 'app/');
    injectDepend(depConfig);
}



/**
 * 得到Css脚本
 */
ComponentUtils.prototype.getCssDepScript = function(depInfo){
     var deps = depInfo.get('global-dependencies-sorted')['css'];
     var content = [];
     for(var i=0 ; i<deps.length ; i++){
        content.push('<link rel="stylesheet" href="'+deps[i]+'" />');
     }
     return content.join('\n');
}


/**
 *
 */
var getFileToComponentMap = function(depsConfig){

    var depsMap = depsConfig.get('global-dependencies').get(); //组件依赖关系
    //将组件依赖平面化
    var fileToComponents = {};
    for(var p in depsMap){
         var mains = depsMap[p].main;

         if(typeof mains!='undefined' && mains.length>0){
             for(var i=0 ; i<mains.length ; i++){
                var pos = mains[i].indexOf('#@');  //这里需要调整一下，看看能不能在detect中处理掉#@标示
                var v = pos < 0 ? mains[i] : mains[i].substr(0 , pos);
                fileToComponents[v] = p;
             }
         }
    }
    return fileToComponents;
}

/**
 * 得到组件依赖js文件内容，供动态装载组件依赖脚本
 * @param depInfo 依赖文件信息
 * @param options
 */
ComponentUtils.prototype.getDepsJSContent = function(depInfo , options){
     //这里需要过滤掉glue 、 requirejs 模块
     var fileToComponentMap = getFileToComponentMap(depInfo);
     var jsdepFile = depInfo.get('global-dependencies-sorted')['js'];
     var filteredMap = {};
     var filteredJsdep = [];
     for(var i=0 ; i<jsdepFile.length; i++){
        var compName = fileToComponentMap[jsdepFile[i]];
        if(compName.indexOf('glue')==-1 &&  compName.indexOf('requirejs')==-1){
            filteredMap[jsdepFile[i]] = compName;
            filteredJsdep.push(jsdepFile[i]);
        }
     }

     options = options || {};
     options.needCompress = (typeof options.needCompress == 'undefined' ?  true : options.needCompress);  //是压缩文件，默认true
     return processJsFiles(filteredJsdep  , options , filteredMap);
}

/**
 * 得到依赖文件列表
 */
ComponentUtils.prototype.getDepFiles = function(depInfo , options){
    var  device = options.device || "";
    var fileToComponentMap = getFileToComponentMap(depInfo);
    var depfiles = depInfo.get('global-dependencies-sorted');

    var jsdepFile = depInfo.get('global-dependencies-sorted')['js'];
    var ret = [];
    var p = function(jsdepFile){
        for(var i=0 ; i<jsdepFile.length; i++){
           var compName = fileToComponentMap[jsdepFile[i]];
           if(compName.indexOf('glue')==-1 &&  compName.indexOf('requirejs')==-1){
               ret.push(jsdepFile[i]);
           }
        }
    }
    if(jsdepFile) p(jsdepFile);
    for(var type in depfiles){
        if(type != "js" && type.indexOf("js")==0){
            var _device = type.split("_")[1];
            if(_device == device)
            p(depfiles[type]);
        }
    }
    return ret;
}


ComponentUtils.prototype.getDepsCssContent = function(depInfo , options){
    var  device = options.device || "";
     var deps = depInfo.get('global-dependencies-sorted')['css'];
     //var fileToComponentMap = getFileToComponentMap(depInfo);
     options = options || {};
     options.needCompress = typeof options.needCompress == 'undefined' ?  true : options.needCompress;  //是压缩文件，默认true

     var ret = [];
     var p = function(depFile){
        for(var i=0 ; i<depFile.length; i++){
               ret.push(depFile[i]);
        }
    }
    if(deps) p(deps);
    for(var type in deps){
        if(type != "css" && type.indexOf("css")==0){
            var _device = type.split("_")[1];
            if(_device == device)
            p(deps[type]);
        }
    }
    return processCssFiles(ret  , options);
}


/**
 * 处理js文件依赖
 */
function processJsFiles(jsDeps , options , fileToComponentNames){
     var contents = [];
     var cdnFiles = [];
     if(typeof jsDeps!== 'undefined'){
        //合并文件
        for(var i=0 ; i<jsDeps.length ; i++){
            if(/^http[s]?:\/\//i.test(jsDeps[i])){ //如果是CDN地址，则不需要压缩
                cdnFiles.push(jsDeps[i])
                continue;
            }
            contents.push({filePath:jsDeps[i] , content: fileUtils.read(jsDeps[i])});
        }
     }
     var retContent = '';
     if(cdnFiles.length >0){ //CDN地址文件使用require.config({paths:{},waitSeconds: 20,shim: {}})
         retContent += 'require.config({paths:{';
         for(var i=0 ; i<cdnFiles.length ; i++){
             var f = cdnFiles[i];
             var componentsName = fileToComponentNames[f];
             if(f.lastIndexOf('.js')!=-1){
                    f= f.substring(0,f.lastIndexOf('.js'));
             }
             retContent += '"'+componentsName+'" :"'+f+'"'; //这里还需要去掉文件后缀
             if(i>0 && i<cdnFiles.length-1){
                 retContent += ',';
             }
         }
         retContent += '},waitSeconds: 20,shim: {}});'
     }
     if(contents.length==0){
        return retContent;
     }
     //压缩文件
     if(options.needCompress){
         return retContent + compressJS(contents);
     }else{
          for(var i =0 ; i<contents.length ; i++){
             retContent += '\n'+ contents[i].content;
         }
         return retContent;
     }
}

/**
 * 处理css文件的合并,压缩
 */
function processCssFiles(cssDeps , options){
    if(typeof cssDeps!== 'undefined'){
        var contents = cssDeps.join('\n');
        if(options.needCompress){
            return cssmin(contents);
        }else{
            return contents;
        }
    }
    return '';
}


function compressJS(contents){
    var uglifyJSOpt = {};
    var finalCode = [];
    var topLevel = null;
    for(var i =0 ; i<contents.length ; i++){
    topLevel = UglifyJS.parse(contents[i].content , {
           filename: contents[i].filePath,
                toplevel: topLevel
           });
    }
    topLevel.figure_out_scope();
    var compressor = UglifyJS.Compressor();
    var compressed_ast = topLevel.transform(compressor);
    compressed_ast.figure_out_scope();
    compressed_ast.compute_char_frequency();
    compressed_ast.mangle_names();
    var stream = UglifyJS.OutputStream({});
    compressed_ast.print(stream);
    var code = stream.toString(); // this is your minified code
    return code;
}


module.exports = new ComponentUtils();