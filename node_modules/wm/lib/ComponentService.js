
var urlparse = require('url');
var querystring = require('querystring');
var http = require('http');
var https = require('https');
var cutil = require('./ComponentUtils');
var crypto = require('crypto');
var fs = require('fs');
var fileUtils = require('file-utils');
var path = require('path');

//var homeDir =  process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'];   //home目录
var workDir =  process.cwd().replace(/\\/gi,'/');   //工作目录

/**
 * 组件服务 middleware
 */
module.exports = function ComponentService(opt , connect) {
   
   var connect = connect; //连接
   var cache  = {};   //简单的缓存安装目录
   var router = {};
   //在dev模式下不需要重新安装组件，在非dev方式下需要
   var mode = opt.mode || 'local' ;  //默认开发模式
   //安装目录,如果没有指定组件的安装路径则使用工作路径作为安装路径，
   //开发模式下不需要指定,开发模式下的工作路径必须是项目的根路径
   var installDir = (opt.installDir || workDir).replace(/\\/gi,'/'); 

  /**
   * 简单的产生一个数
   */
  function MD5(str, encoding) {
      return crypto.createHash('md5').update(str).digest(encoding || 'hex').substring(0,8);
  };

  /**
   * 删除临时目录
   */
  function deleteTempFile(fullInstallDir){
      fileUtils.delete(fullInstallDir , {force:true});
  }

  /**
   * 创建临时bower目录
   * @param dir 需要创建的目录
   */
  function initTempDir (dir){

    var tempDir = installDir+'/componentstemp';
    if(!fs.existsSync(tempDir)){ //如果不存在文件夹则创建
        fs.mkdirSync(tempDir);
    }

    var fullInstallDir = tempDir+"/"+dir;
    if(fs.existsSync(fullInstallDir)){
        return fullInstallDir;
    }

    fileUtils.mkdir(fullInstallDir);
    writeFile("_bower.json" , fullInstallDir+"/bower.json");
    writeFile("bowerrc" , fullInstallDir+"/.bowerrc");

    return fullInstallDir
  }


  /**
   * cpoy源文件到指定的文件
   */
  function writeFile(srcfile , tofile) {
    var  srcPath = path.resolve(__dirname, '../templates/'+srcfile);
    var content =  fileUtils.read(srcPath);
    fileUtils.write(tofile, content);
  }


   //组件脚本combine服务
   function combineComponentsScript(req , res , next){
       req = wrapReq(req);
       var tempInstall = installDir;
       var isDebug = isDebugRequest(req);
       var url = urlparse.parse(req.url);
       if(typeof cache[url.href] !== 'undefined'){
            res.end(cache[url.href]);
            return;
       }

       if(mode == 'remote'){ //如果不是开发模式则需要创建临时目录
            var urlDir = MD5(url.href);
            tempInstall = initTempDir(urlDir);
            console.log('gen url : '+url.href +' , \ngen dir : '+tempInstall);
       }
       var componentNames = getComponentNames(req);
       var filterComponents = getFilterComponent(req);
       componentNames.push.apply(componentNames , filterComponents);
       /*
       for(var p in filterComponents){
          componentNames[p] = filterComponents[p];
       }
       */
       if(typeof componentNames == 'undefined' || componentNames.length == 0){
          res.end('');
          return; //没有组件直接返回
       }
       var save = true;
       if(mode == 'local'){
          save = false;
       }

       cutil.install(componentNames , {'installDir':tempInstall , 'save':save}).on('end' , function(){

             var newcomponentNames = acquireModuleName(componentNames);
             var newfilterComponents = acquireModuleName(filterComponents);
             genResponse(req , res , newcomponentNames , tempInstall , filterComponents);
       }).on('error' , function(error){
          console.log(error);
       });
   };

   function genResponse(req , res , componentNames , installDir , filterComponents){
        var deviceType = req.params['device'];
        if(req.params['isDebug'] == 'true'){
          var depInfo =cutil.getDepInfo(componentNames , {'installDir':installDir , isDebug:true , 'filterComponents':filterComponents});

          var depFiles = cutil.getDepFiles(depInfo , {'device':deviceType});
          var debugScriptjs = cutil.getJsDepsScriptsMode(depFiles);
          var retContent = '';
          if(mode == 'local'){
              var regix = new RegExp(installDir+'/app/','ig');
              retContent = debugScriptjs.replace(regix , '').replace(/\\/gi,'/');
          }else if(mode == 'remote'){
              var regix = new RegExp(workDir, "gi");
              retContent = debugScriptjs.replace(regix , 'http://'+opt.ipv4+':'+opt.port+opt.sourcectx).replace(/\\/gi,'/');
          }

          if(retContent == ''){
            cache[req.href] = retContent;
            res.end('');
            return;
          }else{
            retContent = retContent.replace(/"/gi , "'")
            retContent = "document.write(\""+retContent+"\")";
            cache[req.href] = retContent;
            res.end(retContent);
          }

       }else{

          var depInfo = cutil.getDepInfo(componentNames , {'installDir':installDir , isDebug:false , 'filterComponents':filterComponents});
          var isCompress = req.params['isCompress'];
          var content = cutil.getDepsJSContent(depInfo , {needCompress:(isCompress=='true' || isCompress == '' || typeof isCompress=='undefined')});

          cache[req.href] = content;
          res.end(content);
       }
   }

   function acquireModuleName(moduleNames){
      var ret = {};
       moduleNames.forEach(function(moduleName){
          //ret.push(moduleName.split('=')[0]);
          var splits = moduleName.split('=');
          ret[splits[0]] = splits[1];
       });
       return ret;
   }

   function processModuleName(moduleNames){
       var ret = [];
       moduleNames.forEach(function(moduleName){
          if(moduleName.indexOf("glue") != -1){
            ret.push(moduleName);
          }else{
            ret.push(moduleName.replace('#',"__")+'='+moduleName);
            //ret[moduleName.replace('#',"__")] = moduleName;
          }
       });
       return ret;
   }

   /**
    * 通过url分析组件名称列表 TODO
    */
   function getComponentNames(req){
      var pathname = req.params['c'];
      if(typeof pathname == 'undefined' || pathname == ''){
        return [];
      }
      return  processModuleName(pathname.split(','));
   }

   function getFilterComponent(req){
      var pathname = req.params['f'];
      if(typeof pathname == 'undefined' || pathname == ''){
        return [];
      }
      return  processModuleName(pathname.split(','));
   }

   /**
    * 判断请求是否是debug请求
    */
   function isDebugRequest(req){
      return req.params['isDebug'];
   }

   /**
    * 得到请求的文件类型 css||js TODO
    */
   function getFileType(req){
       return 'js';
   }

   function wrapReq(req){
      var url = urlparse.parse(req.url , true);
      req.pathname = url.pathname;
      req.params = url.query;
      req.href = url.href;
      return req;
   }

   return combineComponentsScript;
}